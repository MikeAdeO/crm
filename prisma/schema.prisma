generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  password      String
  firstName     String?
  lastName      String?
  phone         String?
  status        String?      @default("pending")
  email         String       @unique
  title         String?
  emailVerified Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  address       UserAddress?
  otpCodes      OtpCode[]

  CompanyUser CompanyUser[]
}

model UserAddress {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  countryId Int
  cityId    Int
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  country Country @relation(fields: [countryId], references: [id])
  city    City    @relation(fields: [cityId], references: [id])
}

model Country {
  id     Int     @id @default(autoincrement())
  name   String
  symbol String?
  status Boolean @default(true)

  UserAddress UserAddress[]

  City City[]

  @@unique([name])
}

model City {
  id        Int     @id @default(autoincrement())
  name      String
  symbol    String?
  countryId Int
  status    Boolean @default(true)

  country Country @relation(fields: [countryId], references: [id])

  UserAddress UserAddress[]

  @@unique([name, countryId])
}

model OtpCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiryAt  DateTime
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Company {
  id           Int                  @id @default(autoincrement())
  name         String
  reference    String               @unique
  email        String?              @unique
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  details      CompanyDetails?
  teams        Team[]
  subscription CompanySubscription?

  CompanyUser CompanyUser[]
}

model CompanyUser {
  id        Int     @id @default(autoincrement())
  companyId Int
  userId    Int
  status    Boolean @default(false)
  user      User    @relation(fields: [id], references: [id])
  company   Company @relation(fields: [companyId], references: [id])
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  status    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompanyDetails {
  id                      Int      @id @default(autoincrement())
  companyId               Int      @unique
  website                 String?
  industry                String?
  foundingYear            String?
  revenue                 Float?
  grossProfit             Float?
  previousYearGrossProfit Float?
  ebitda                  Float?
  ebitdaPreviousYear      Float?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])
}

model Team {
  id        Int      @id @default(autoincrement())
  fullName  String
  roleId    Int
  companyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id])
}

model SubscriptionPlan {
  id                       Int      @id @default(autoincrement())
  name                     String
  amount                   Float
  status                   Boolean  @default(true)
  expiry_days_number       Int?
  grace_period_days_number Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  details              SubscriptionPlanDetails[]
  companySubscriptions CompanySubscription[]
}

model SubscriptionPlanDetails {
  id                 Int      @id @default(autoincrement())
  subscriptionPlanId Int
  name               String
  value              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  subscriptionPlan SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
}

model CompanySubscription {
  id                 Int      @id @default(autoincrement())
  subscriptionPlanId Int
  companyId          Int      @unique
  expiryAt           DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  subscriptionPlan SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  company          Company          @relation(fields: [companyId], references: [id])
}
